// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries
import {
  GoogleAuthProvider,
  getAuth,
  signInWithPopup,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  sendPasswordResetEmail,
  signOut,
} from "firebase/auth";
import {
  getFirestore,
  query,
  getDocs,
  collection,
  where,
  addDoc,
  doc,
  setDoc,
  updateDoc,
  arrayRemove,
  arrayUnion,
} from "firebase/firestore";
// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyDdSTvLk9KzL3GkBSFOoTX7DS9PaqqIqaU",
  authDomain: "soms-409ff.firebaseapp.com",
  //databaseURL: "https://soms-409ff-default-rtdb.firebaseio.com",
  projectId: "soms-409ff",
  storageBucket: "soms-409ff.appspot.com",
  messagingSenderId: "957818394464",
  appId: "1:957818394464:web:96e43c86236088bd1db005",
  measurementId: "G-VNY14WEXDG"
};
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
const googleProvider = new GoogleAuthProvider();
const signInWithGoogle = async () => {
  try {
    const res = await signInWithPopup(auth, googleProvider);
    const user = res.user;
    const q = query(collection(db, "users"), where("uid", "==", user.uid));
    const docs = await getDocs(q);
    if (docs.docs.length === 0) {
      await addDoc(collection(db, "users"), {
        uid: user.uid,
        name: user.displayName,
        authProvider: "google",
        email: user.email,
      });
    }
  } catch (err) {
    console.error(err);
    alert(err.message);
  }
};
const logInWithEmailAndPassword = async (email, password) => {
  try {
    await signInWithEmailAndPassword(auth, email, password);
  } catch (err) {
    console.error(err);
    alert(err.message);
  }
};

/**
 * 
 * @param {string} name FName LName
 * @param {string} email emailformatting @xxxx.com
 * @param {HashedString} password 
 * @summary When a user is first registered their initial role will be "Volunteer"
 */
const registerWithEmailAndPassword = async (name, email, password) => { //changed the document id to the user.uid instead of the auto genereated id 
  try{
    const res = await createUserWithEmailAndPassword(auth, email, password);
    const user = res.user;
    await setDoc(doc(db, "users", user.uid), { //setDoc used instead of addDoc to avoid the auto generated id
      uid: user.uid,
      name: name,
      email: email,
      authProvider: "local",
      position : [],
      interestedsystems : [],
    });
  }
  catch(err){
    console.error(err);
    alert(err.message);
  }
  /*
   try {
     const res = await createUserWithEmailAndPassword(auth, email, password);
     const user = res.user;
     await addDoc(collection(db, "users"), {
       uid: user.uid,
       name,
       authProvider: "local",
       email,
       position: ["Member"],
       interestedsystems: ["None"],
       //userId : id, //this is trying to grab the auto genereated id but won't do it, this is key to getting the user to enroll and update their information.
     });
   } catch (err) {
     console.error(err);
     alert(err.message);
   }
   */
};

/**
 * 
 * @param {*} userRef User being referenced
 * @param {*} position Position being added [Roles Collection in DB]
 * @param {*} interestedsystem User inputs of their respective interested systems
 */
const addPosition = async (userRef, position, interestedsystem) => {
  //get the user's id
  console.log(userRef);
  try {
    const test = doc(db, "users/" + userRef.uid); //this works, but only for this single user as this is their autogenerated id
    await updateDoc(test, {
      position: arrayUnion(position),
      interestedsystems: arrayUnion(interestedsystem),
    });
  } catch (err) {
    console.error(err);
    alert(err.message);
  }
}

/**
 * 
 * @param {*} SystemName Name of system to be created
 * @param {*} Sname System Lead Name
 * @param {*} SystemDescription Description of the system being created for explore page
 * @param {*} Systemimg Image File representative of System
 */
const createSystem = async (SystemName, Sname, SystemDescription, Systemimg) => {
  try {
    await addDoc(collection(db, "Systems"), {
      name: SystemName,
      SystemLead: Sname,
      Description: SystemDescription,
      ImageURL: Systemimg,
    });
  } catch (err) {
    console.error(err);
    alert(err.message);
  }
}

/**
 * 
 * @param {*} Sname SystemName for the Job to be assigned (Dropdown)
 * @param {*} Jname Name of the Job Being created (user input)
 * @param {*} info User information about the job
 * @param {*} date Date Information, Currently no format
 */
const createJob = async (Sname, Jname, info, date) => {
  try {
    await addDoc(collection(db, "Job"), {
      SystemName: Sname,
      JobName: Jname,
      Information: info,
      Deadline: date
    });
  } catch (err) {
    console.error(err);
    alert(err.message);
  }
}

/**
 * 
 * @param {*} Atype Announcement Type: Defined by user input
 * @param {*} Ainfo Announcement Info: user input to be placed in announcement info display
 */
const createAnnouncement = async (Atype, Ainfo) => {
  try {
    await addDoc(collection(db, "Announcement"), {
      AnnouncementType: Atype,
      Announcement: Ainfo
    });
  } catch (err) {
    console.error(err);
    alert(err.message);
  }
}

const sendPasswordReset = async (email) => {
  try {
    await sendPasswordResetEmail(auth, email);
    alert("Password reset link sent!");
  } catch (err) {
    console.error(err);
    alert(err.message);
  }
};
const logout = () => {
  signOut(auth);
};
export {
  auth,
  db,
  signInWithGoogle,
  logInWithEmailAndPassword,
  registerWithEmailAndPassword,
  sendPasswordReset,
  logout,
  createSystem,
  createJob,
  createAnnouncement,
  addPosition
};